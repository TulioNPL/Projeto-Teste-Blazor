@page "/lista"
@inject HttpClient Http

@using System.Collections.ObjectModel
@using System.ComponentModel

<h3><b>Lista De Jogadores</b></h3>

@if (willEdit) {
    <div>
        <h3>Editar jogador</h3>
        <div>
            Nome: <input type="text" @bind-value="Editado.Nome" @bind-value:event="oninput" />
            Idade: <input type="number" @bind-value="Editado.Idade" @bind-value:event="oninput" />
            Id do Clube: <input type="number" @bind-value="Editado.TimesId" @bind-value:event="oninput" />
            Camisa: <input type="number" @bind-value="Editado.Camisa" @bind-value:event="oninput" />
            <button class="btn btn-primary" style="background-color: green;" @onclick="OkEdit">Ok</button>
        </div>
    </div>
}

@if (jogadores == null) {
    <p><em>Loading...</em></p>
} else {

    <DxDataGrid Data="@jogadores"
                PageIndex="0"
                PagerNavigationMode="PagerNavigationMode.InputBox"
                PagerPageSizeSelectorVisible="true"
                PagerAllowedPageSizes=@(new int[] {2,5,10,20,50})
                ShowFilterRow="true"
                ShowGroupPanel="true"
                KeyFieldName="@nameof(Jogador.Id)"
                PageSize="5">

        <DxDataGridCommandColumn Width="150px" />

        <DxDataGridColumn Field="@nameof(Jogador.Nome)" />
        <DxDataGridSpinEditColumn Field="@nameof(Jogador.Idade)" />
        <DxDataGridSpinEditColumn Field="@nameof(Jogador.Camisa)" Caption="Nº da Camisa" />
        <DxDataGridComboBoxColumn Caption="Nome do Clube"
                                  Data="@times"
                                  Field="@nameof( Jogador.TimesId )"
                                  ValueFieldName="@nameof(Time.Id)"
                                  TextFieldName="@nameof(Time.Nome)" />

    </DxDataGrid>

}


@code {
    private List<Jogador> jogadores;
    private List<Time> times;
    private bool willEdit;
    private int EditId = 0;
    private Jogador Editado = new Jogador { Camisa = 0, Idade = 0, Nome = "" };

    [Parameter]
    [DefaultValue(PagerNavigationMode.Auto)]
    public PagerNavigationMode PagerNavigationMode { get; set; }

    protected override async Task OnInitializedAsync() {
        willEdit = false;

        try {
            Task TTimes = GetJogadores();
            Task TJogadores = GetTimes();

            await Task.WhenAll(TTimes, TJogadores);

        } catch (AccessTokenNotAvailableException exception) {
            exception.Redirect();
        }
    }

    private async Task GetJogadores() {
        jogadores = await Http.GetFromJsonAsync<List<Jogador>>("Jogador/GetAll");
    }

    private async Task GetTimes() {
        times = await Http.GetFromJsonAsync<List<Time>>("Time/GetAll");
    }

    //Confirmação da edição e fecha formulário
    protected async void OkEdit() {
        willEdit = false;
        HttpResponseMessage e = await Http.PutAsJsonAsync<Jogador>("Jogador/EditJogador", Editado);

        RenderList();
    }

    //Abre formulário de edição
    protected async void Edit(int Id) {
        EditId = Id;
        Editado = await Http.GetFromJsonAsync<Jogador>("Jogador/GetById/" + EditId);
        willEdit = true;

        StateHasChanged();
        Console.WriteLine("Editando id " + EditId);
    }

    protected async void Remove(int RemoveId) {
        HttpResponseMessage e = await Http.DeleteAsync("Jogador/DelJogador/" + RemoveId);

        Console.WriteLine("Removido id " + RemoveId);
        RenderList();
    }

    private async void RenderList() {
        try {
            jogadores = await Http.GetFromJsonAsync<List<Jogador>>("Jogador/GetAll");
            StateHasChanged();
        } catch (AccessTokenNotAvailableException exception) {
            exception.Redirect();
        }
    }
}