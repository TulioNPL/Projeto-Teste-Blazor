@page "/listaT"
@inject HttpClient Http

<h3><b>Lista De Times</b></h3>

@if (willEdit) {
    <div>
        <h3>Editar Time</h3>
        <div>
            Nome: <input type="text" @bind-value="Editado.Nome" @bind-value:event="oninput" />
            Ano de Fundação: <input type="number" @bind-value="Editado.Ano" @bind-value:event="oninput" />
            <button class="btn btn-primary" style="background-color: green;" @onclick="OkEdit">Ok</button>
        </div>
    </div>
}

@if (times == null) {
    <p><em>Loading...</em></p>
} else {

<DxDataGrid Data="@times"
            PageIndex="0"
            PagerNavigationMode="PagerNavigationMode.InputBox"
            PagerPageSizeSelectorVisible="true"
            PagerAllowedPageSizes=@(new int[] {2,5,10,20,50})
            ShowFilterRow="true"
            ShowGroupPanel="true"
            KeyFieldName="@nameof(Time.Id)"
            PageSize="5">

        <DxDataGridCommandColumn Width="150px" />

        <DxDataGridColumn Field="@nameof(Time.Nome)" 
                          Caption="Nome do Clube"/>
        <DxDataGridSpinEditColumn Field="@nameof(Time.Ano)" 
                                  Caption="Ano de Fundação" />

</DxDataGrid>
}

@code {
    private List<Time> times;
    private bool willEdit;
    private int EditId = 0;
    private Time Editado = new Time { Nome = "", Ano = 0 };

    protected override async Task OnInitializedAsync() {
        willEdit = false;

        try {
            times = await Http.GetFromJsonAsync<List<Time>>("Time/GetAll");
        } catch (AccessTokenNotAvailableException exception) {
            exception.Redirect();
        }
    }

    //Abre formulário de edição
    protected async void Edit(int Id) {
        EditId = Id;
        Editado = await Http.GetFromJsonAsync<Time>("Time/GetById/" + EditId);
        willEdit = true;

        StateHasChanged();
        Console.WriteLine("Editando id " + EditId);
    }

    //Confirmação da edição e fecha formulário
    protected async void OkEdit() {
        willEdit = false;
        HttpResponseMessage e = await Http.PutAsJsonAsync<Time>("Time/EditTime", Editado);

        RenderList();
    }

    protected async void Remove(int RemoveId) {
        HttpResponseMessage e = await Http.DeleteAsync("Time/DelTime/" + RemoveId);

        Console.WriteLine("Removido id " + RemoveId);
        RenderList();
    }

    private async void RenderList() {
        try {
            times = await Http.GetFromJsonAsync<List<Time>>("Time/GetAll");
            StateHasChanged();
        } catch (AccessTokenNotAvailableException exception) {
            exception.Redirect();
        }
    }
}
