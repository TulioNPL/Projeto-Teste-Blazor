@page "/listaT"
@inject HttpClient Http

<h3><b>Lista De Times</b></h3>

@if (Times == null) {
    <p><em>Carregando...</em></p>
} else {

    <DxDataGrid Data="@Times"
                PageIndex="0"
                RowRemovingAsync="@OnRowRemovingAsync"
                RowUpdatingAsync="@OnRowUpdatingAsync"
                RowInsertingAsync="@OnRowInsertingAsync"
                InitNewRow="@OnInitNewRowAsync"
                PagerNavigationMode="PagerNavigationMode.InputBox"
                PagerPageSizeSelectorVisible="true"
                PagerAllowedPageSizes=@(new int[] {2,5,10,20,50})
                ShowFilterRow="true"
                ShowGroupPanel="true"
                KeyFieldName="@nameof(Time.Id)"
                PageSize="10"
                EditMode="DataGridEditMode.PopupEditForm">



        <DxDataGridColumn Field="@nameof(Time.Nome)"
                          Caption="Nome do Clube"
                          TextAlignment="@DataGridTextAlign.Left" />
        <DxDataGridSpinEditColumn Field="@nameof(Time.Ano)"
                                  Caption="Ano de Fundação"
                                  TextAlignment="@DataGridTextAlign.Left" />

        <DxDataGridCommandColumn Width="60px" />
    </DxDataGrid>
}

@code {
    private List<Time> Times;

    protected override async Task OnInitializedAsync() {
        try {
            Times = await Http.GetFromJsonAsync<List<Time>>("Time/GetAll");
        } catch (AccessTokenNotAvailableException exception) {
            exception.Redirect();
        }
    }

    //Remove Linha
    async Task OnRowRemovingAsync(Time Deleted) {

        HttpResponseMessage e = await Http.DeleteAsync("Time/DelTime/" + Deleted.Id);

        if (e.IsSuccessStatusCode) {
            //Atualiza tabela
            int Index = Times.IndexOf(Deleted);
            Times.RemoveAt(Index);
            StateHasChanged();
        } else {
            Console.WriteLine("Erro ao remover");
        }
    }

    //Atualiza Linha
    async Task OnRowUpdatingAsync(Time Updated, IDictionary<string, object> NewValues) {
        Time Edited = DicionarioToObject.DictionaryToTime(Updated, NewValues);
        HttpResponseMessage e = await Http.PutAsJsonAsync<Time>("Time/EditTime", Edited);


        if (e.IsSuccessStatusCode) {
            //Atualiza tabela
            int Index = Times.IndexOf(Updated);
            Times[Index].Nome = Edited.Nome;
            Times[Index].Ano = Edited.Ano;
            StateHasChanged();
        } else {
            Console.WriteLine("Erro ao editar");
        }
    }

    //Insere Linha na base
    async Task OnRowInsertingAsync(IDictionary<string, object> NewValues) {
        Time Created = new Time();
        Created = DicionarioToObject.DictionaryToTime(Created, NewValues);
        HttpResponseMessage e = await Http.PostAsJsonAsync<Time>("Time/AddTime", Created);

        if (e.IsSuccessStatusCode) {
            //Atualiza tabela
            Time T = await e.Content.ReadFromJsonAsync<Time>();
            Created.Id = T.Id;
            Times.Add(Created);
            StateHasChanged();
        } else {
            Console.WriteLine("Erro ao adicionar");
        }
    }

    //Valores default da nova linha
    Task OnInitNewRowAsync(Dictionary<string, object> Values) {
        Values.Add(nameof(Time.Nome), "Nome do Time");
        return Task.CompletedTask;
    }
}
