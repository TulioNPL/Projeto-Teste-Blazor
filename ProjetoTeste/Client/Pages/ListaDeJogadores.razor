@page "/lista"
@inject HttpClient Http

@using System.Collections.ObjectModel
@using System.ComponentModel

<h3><b>Lista De Jogadores</b></h3>

@if (Jogadores == null) {
    <p><em>Carregando...</em></p>
} else {

    <DxDataGrid Data="@Jogadores"
                RowRemovingAsync="@OnRowRemovingAsync"
                RowUpdatingAsync="@OnRowUpdatingAsync"
                RowInsertingAsync="@OnRowInsertingAsync"
                InitNewRow="@OnInitNewRowAsync"
                PageIndex="0"
                PagerNavigationMode="PagerNavigationMode.InputBox"
                PagerPageSizeSelectorVisible="true"
                PagerAllowedPageSizes=@(new int[] {2,5,10,20,50})
                ShowFilterRow="true"
                ShowGroupPanel="true"
                KeyFieldName="@nameof(Jogador.Id)"
                PageSize="10"
                EditMode="DataGridEditMode.PopupEditForm">


        <DxDataGridColumn Field="@nameof(Jogador.Nome)"
                          TextAlignment="@DataGridTextAlign.Left"
                          Width="200px" />
        <DxDataGridSpinEditColumn Field="@nameof(Jogador.Idade)"
                                  TextAlignment="@DataGridTextAlign.Left"
                                  Width="50px" />
        <DxDataGridSpinEditColumn Field="@nameof(Jogador.Camisa)" Caption="Nº da Camisa"
                                  TextAlignment="@DataGridTextAlign.Left"
                                  Width="60px" />
        <DxDataGridComboBoxColumn Caption="Nome do Clube"
                                  Data="@Times"
                                  Field="@nameof( Jogador.TimesId )"
                                  ValueFieldName="@nameof(Time.Id)"
                                  TextFieldName="@nameof(Time.Nome)"
                                  TextAlignment="@DataGridTextAlign.Left"
                                  Width="200px" />

        <DxDataGridCommandColumn Width="60px" />

    </DxDataGrid>

}


@code {
    private List<Jogador> Jogadores;
    private List<Time> Times;

    protected override async Task OnInitializedAsync() {

        try {
            Task TTimes = GetJogadores();
            Task TJogadores = GetTimes();

            await Task.WhenAll(TTimes, TJogadores);

        } catch (AccessTokenNotAvailableException exception) {
            exception.Redirect();
        }
    }

    private async Task GetJogadores() {
        Jogadores = await Http.GetFromJsonAsync<List<Jogador>>("Jogador/GetAll");
    }

    private async Task GetTimes() {
        Times = await Http.GetFromJsonAsync<List<Time>>("Time/GetAll");
    }

    //Remove linha
    async Task OnRowRemovingAsync(Jogador Deleted) {
        HttpResponseMessage e = await Http.DeleteAsync("Jogador/DelJogador/" + Deleted.Id);


        if (e.IsSuccessStatusCode) {
            //Atualiza tabela
            int Index = Jogadores.IndexOf(Deleted);
            Jogadores.RemoveAt(Index);
            StateHasChanged();
        } else {
            Console.WriteLine("Erro ao remover");
        }
    }

    //Atualiza linha
    async Task OnRowUpdatingAsync(Jogador Updated, IDictionary<string, object> NewValues) {
        Jogador Edited = DicionarioToObject.DictionaryToJogador(Updated, NewValues);
        Console.WriteLine(Updated.Id);
        Console.WriteLine(Edited.Id);
        HttpResponseMessage e = await Http.PutAsJsonAsync<Jogador>("Jogador/EditJogador", Edited);

        if (e.IsSuccessStatusCode) {
            //Atualiza tabela
            int Index = Jogadores.IndexOf(Updated);
            Jogadores[Index].Nome = Edited.Nome;
            Jogadores[Index].Camisa = Edited.Camisa;
            Jogadores[Index].Idade = Edited.Idade;
            Jogadores[Index].TimesId = Edited.TimesId;
            StateHasChanged();
        } else {
            Console.WriteLine("Erro ao editar");
        }
    }

    //Insere linha
    async Task OnRowInsertingAsync(IDictionary<string, object> NewValues) {
        Jogador Created = new Jogador();
        Created = DicionarioToObject.DictionaryToJogador(Created, NewValues);
        HttpResponseMessage e = await Http.PostAsJsonAsync<Jogador>("Jogador/AddJogador", Created);

        if (e.IsSuccessStatusCode) {
            //Atualiza tabela
            Jogador J = await e.Content.ReadFromJsonAsync<Jogador>();
            Created.Id = J.Id;
            Jogadores.Add(Created);
            StateHasChanged();
        } else {
            Console.WriteLine("Erro ao adicionar");
        }
    }

    //Valores default da nova linha
    Task OnInitNewRowAsync(Dictionary<string, object> Values) {
        Values.Add(nameof(Jogador.Nome), "Nome do Jogador");
        return Task.CompletedTask;
    }
}